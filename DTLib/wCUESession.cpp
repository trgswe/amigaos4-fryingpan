/*
 * FryingPan - Amiga CD/DVD Recording Software (User Intnerface and supporting Libraries only)
 * Copyright (C) 2001-2008 Tomasz Wiszkowski Tomasz.Wiszkowski at gmail.com
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */


#include "wCUESession.h"
#include <Generic/LibrarySpool.h>
#include <libclass/dos.h>
#include <libdata/Optical/IOptItem.h>

                     wCUESession::wCUESession(const char* sFileName, const IOptItem *it, EDtError &rc)
{
   fcue = 0;
   fbin = 0;
   name = sFileName;
   sess = it;

   if (it == NULL)
   {
      rc = DT_InvalidOperation;
      return;
   }
   
   if (it->getItemType() != Item_Session)
   {
      rc = DT_InvalidOperation;
      return;
   }

}

                     wCUESession::~wCUESession()
{
   if (0 != fbin)
      DOS->Close(fbin);
   if (0 != fcue)
      DOS->Close(fcue);
   fcue = 0;
   fbin = 0;
}


IFileWriter*         wCUESession::openWrite(const char* sFile, const IOptItem *it, EDtError &rc)
{
   return new wCUESession(sFile, it, rc);
}

const char*          wCUESession::getName()
{
   return static_getName();
}

bool                 wCUESession::writeData(void* pBuff, int pLen)
{
   ASSERT(sess != 0);
   int32 size = pLen * sess->getSectorSize();

   if (fbin != 0)
      return (size == DOS->Write(fbin, pBuff, size));

   return false;
}

bool                 wCUESession::setUp()
{
   String s;
   int trk = 1;

   s = name + ".cue";
   fcue = DOS->Open(s.Data(), MODE_NEWFILE);

   if (fcue == 0)
      return false;

   s = DOS->FilePart(name.Data());
   s = name + ".bin";
   fbin = DOS->Open(s.Data(), MODE_NEWFILE);
   
   if (fbin == 0)
      return false;

   DOS->FPuts(fcue, "REM Cue sheet generated by The Frying Pan\n\n");
   //FPuts(fcue, "REM CATALOG xxxxxxxxxxx\n");
   //FPuts(fcue, "REM CDTEXTFILE 'file.cdt'\n");
   //FPuts(fcue, "REM DISC_ID id\n");
   //FPuts(fcue, "REM UPC_EAN code\n");
   //FPuts(fcue, "\n");
   
   DOS->FPuts(fcue, "\tFILE \""); 
   DOS->FPuts(fcue, s.Data());
   DOS->FPuts(fcue, "\" BINARY\n\n");
   
   if (sess->hasCDText())
   {
      DOS->FPuts(fcue, "\tARRANGER \"");
      DOS->FPuts(fcue, const_cast<char*>(sess->getCDTDirector()));
      DOS->FPuts(fcue, "\"\n\tCOMPOSER \"");
      DOS->FPuts(fcue, const_cast<char*>(sess->getCDTComposer()));
      DOS->FPuts(fcue, "\"\n\tMESSAGE \"");
      DOS->FPuts(fcue, const_cast<char*>(sess->getCDTMessage()));
      DOS->FPuts(fcue, "\"\n\tPERFORMER \"");
      DOS->FPuts(fcue, const_cast<char*>(sess->getCDTArtist()));
      DOS->FPuts(fcue, "\"\n\tSONGWRITER \"");
      DOS->FPuts(fcue, const_cast<char*>(sess->getCDTLyrics()));
      DOS->FPuts(fcue, "\"\n\tTITLE \"");
      DOS->FPuts(fcue, const_cast<char*>(sess->getCDTTitle()));
      DOS->FPuts(fcue, "\"\n");
      //FPuts(fcue, "\tREM TOC_INFO t1");
      //FPuts(fcue, "\n\tREM TOC_INFO2 t2");
      //FPuts(fcue, "\n\tREM SIZE_INFO");
   }

   trk = 0;
   for (int i=0; i<sess->getChildCount(); i++)
   {
      const IOptItem *it = sess->getChild(i);
      
      String f;
      f.FormatStr("\n\nTRACK %ld %s\n", ARRAY(it->getItemNumber(), 
               it->getDataType() == Data_Audio ? (int)"AUDIO" :
               it->getDataType() == Data_Mode1 ? (int)"MODE1/2352" : (int)"MODE2/2352"));

      DOS->FPuts(fcue, f.Data());     
 
      for (int ix=0; ix<it->getChildCount(); ix++)
      {
         const IOptItem *idx = it->getChild(ix);

         f.FormatStr("\tINDEX %ld %ld:%02ld:%02ld\n", ARRAY(
               idx->getItemNumber(),                 // NOTE:
               (idx->getStartAddress()) / 75 / 60,   // this is an offset within actual file!
               (idx->getStartAddress()) / 75 % 60,   // and since we create one large file
               (idx->getStartAddress()) % 75));      // this is the real offset :]
         DOS->FPuts(fcue, f.Data());
      }

      //FPuts(fcue, "\tREM FLAGS PRE DCP 4CH SCMS\n");
      //FPuts(fcue, "\tREM ISRC ccooooyysssss\n");
      f.FormatStr("\tPREGAP %ld\n", ARRAY(it->getPreGapSize()));
      DOS->FPuts(fcue, f.Data());
      //FPuts(fcue, "\tREM POSTGAP yyy\n");
      //FPuts(fcue, "\tREM GENRE zzz\n");
      if (it->hasCDText())
      {
         DOS->FPuts(fcue, "\tARRANGER \"");
         DOS->FPuts(fcue, const_cast<char*>(it->getCDTDirector()));
         DOS->FPuts(fcue, "\"\n\tCOMPOSER \"");
         DOS->FPuts(fcue, const_cast<char*>(it->getCDTComposer()));
         DOS->FPuts(fcue, "\"\n\tMESSAGE \"");
         DOS->FPuts(fcue, const_cast<char*>(it->getCDTMessage()));
         DOS->FPuts(fcue, "\"\n\tPERFORMER \"");
         DOS->FPuts(fcue, const_cast<char*>(it->getCDTArtist()));
         DOS->FPuts(fcue, "\"\n\tSONGWRITER \"");
         DOS->FPuts(fcue, const_cast<char*>(it->getCDTLyrics()));
         DOS->FPuts(fcue, "\"\n\tTITLE \"");
         DOS->FPuts(fcue, const_cast<char*>(it->getCDTTitle()));
         DOS->FPuts(fcue, "\"\n");
         //FPuts(fcue, "\tREM TOC_INFO t1");
         //FPuts(fcue, "\n\tREM TOC_INFO2 t2");
         //FPuts(fcue, "\n\tREM SIZE_INFO");
      }
      ++trk;
   }
   return true;
}

void                 wCUESession::cleanUp()
{
   if (fcue != 0)
      DOS->Close(fcue);
   if (fbin != 0)
      DOS->Close(fbin);
   fcue = 0;
   fbin = 0;
}

void                 wCUESession::deleteFiles()
{
}

void                 wCUESession::dispose()
{
   delete this;
}

void                 wCUESession::setBlockCount(unsigned long)
{
}

void                 wCUESession::setBlockSize(unsigned short)
{
}

const char          *wCUESession::static_getName()
{
   return "CUE Sheet Session";
}

bool                 wCUESession::static_isAudio()
{
   return false;
}

bool                 wCUESession::static_isData()
{
   return false;
}

bool                 wCUESession::static_isSession()
{
   return true;
}


